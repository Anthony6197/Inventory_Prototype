{"remainingRequest":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/babel-loader/lib/index.js!/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/src/components/PlantRenderer.vue?vue&type=template&id=d4f7dd64&scoped=true","dependencies":[{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/src/components/PlantRenderer.vue","mtime":1619745375873},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoSWQgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKCJkYXRhLXYtZDRmN2RkNjQiKTsKCl9wdXNoU2NvcGVJZCgiZGF0YS12LWQ0ZjdkZDY0Iik7Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogInBsYW50Q29udGFpbmVyIgp9OwoKX3BvcFNjb3BlSWQoKTsKCmV4cG9ydCB2YXIgcmVuZGVyID0gLyojX19QVVJFX18qL193aXRoSWQoZnVuY3Rpb24gKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSk7Cn0pOw=="},{"version":3,"sources":["/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/src/components/PlantRenderer.vue"],"names":[],"mappings":";;;;;;;AACO,EAAA,KAAK,EAAC;;;;;;uBAAX,YAAA,CAA8B,KAA9B,EAAA,UAAA,C","sourcesContent":["<template>\n  <div class=\"plantContainer\" />\n</template>\n\n<script>\nimport p5 from 'p5';\nexport default{\n    props: {\n      plant: {},\n\n    },\n    mounted() {\n      new p5(\n          (graphics) => {\n            graphics.setup = () => {\n              graphics.createCanvas(300, 300);\n              graphics.background(174, 217, 165)\n              console.log(\"Here are our plant parameters:\", this.plant);\n              // Replace this with call to plant rendering code\n              // Something like drawPlant(this.plant, graphics)\n              graphics.strokeWeight(3);\n              graphics.circle(60, 30, this.plant.radius);\n\n              draw(this.plant, 280, 580, this.plant.initialSize, Math.PI * 1.5, 1, 8, graphics);\n\n\n            }\n          },\n          this.$el\n      );\n    },\n    methods:{\n      draw(plant, x, y, size, theta, branchDirection, levels, canvas) {\n        if (levels <= 0)  {\n          return;\n        }\n\n        let x2 = x + (size * Math.cos(theta));\n        let y2 = y + (size * Math.sin(theta));\n\n        let centerX = x2 - 30;\n        let centerY = y2 - 30;\n\n        if (1 <= levels < 2) { //&& !(279 < centerX < 281)\n          let r = Math.random();\n          if (r < 0.1) {\n            if (r < plant.flowerProb) {\n              canvas.push();\n              translate(centerX, centerY);\n              rotate(theta + PI / 2);\n              image(plant.flower, 0, 0, 60, 60);\n              canvas.pop();\n            }\n          }\n          else{\n            if (r < plant.berryProb && plant.berry != null) {\n              canvas.push();\n              translate(centerX, centerY);\n              rotate(theta + PI / 2);\n              image(plant.berry, 0, 0, 20, 20);\n              canvas.pop();\n            }\n          }\n        }\n        strokeWeight(Math.pow(plant.strokeSizeSensitivity, levels))\n        // strokeWeight(levels*.5)\n\n        canvas.line(x, y, x2, y2)\n\n        draw(plant, x2, y2, size * plant.leftBranchSize, theta + branchDirection * plant.rightBranchAngle, branchDirection, levels - 1, canvas);\n        draw(plant, x2, y2, size * plant.rightBranchSize, theta - branchDirection * plant.leftBranchAngle, branchDirection, levels - 1, canvas);\n        draw(plant, x2, y2, size * plant.midBranchSize, theta, -branchDirection, levels - 1, canvas);\n      }\n    },\n      randomChoice(value1, value2){\n        return Math.random() < 0.5 ? value1 : value2;\n      },\n      randomInRange(value1, value2){\n        if (value1 > value2){\n          return Math.random() * (value1 - value2) + value2;\n        }\n        else{\n          return Math.random() * (value2 - value1) + value1;\n        }\n    }\n};\n</script>\n\n<style scoped>\n</style>\n\n"],"sourceRoot":""}]}