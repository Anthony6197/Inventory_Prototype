{"remainingRequest":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/babel-loader/lib/index.js!/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/src/components/PlantRenderer.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/src/components/PlantRenderer.vue","mtime":1619745375873},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgcDUgZnJvbSAncDUnOwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHBsYW50OiB7fQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgbmV3IHA1KGZ1bmN0aW9uIChncmFwaGljcykgewogICAgICBncmFwaGljcy5zZXR1cCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBncmFwaGljcy5jcmVhdGVDYW52YXMoMzAwLCAzMDApOwogICAgICAgIGdyYXBoaWNzLmJhY2tncm91bmQoMTc0LCAyMTcsIDE2NSk7CiAgICAgICAgY29uc29sZS5sb2coIkhlcmUgYXJlIG91ciBwbGFudCBwYXJhbWV0ZXJzOiIsIF90aGlzLnBsYW50KTsgLy8gUmVwbGFjZSB0aGlzIHdpdGggY2FsbCB0byBwbGFudCByZW5kZXJpbmcgY29kZQogICAgICAgIC8vIFNvbWV0aGluZyBsaWtlIGRyYXdQbGFudCh0aGlzLnBsYW50LCBncmFwaGljcykKCiAgICAgICAgZ3JhcGhpY3Muc3Ryb2tlV2VpZ2h0KDMpOwogICAgICAgIGdyYXBoaWNzLmNpcmNsZSg2MCwgMzAsIF90aGlzLnBsYW50LnJhZGl1cyk7CiAgICAgICAgZHJhdyhfdGhpcy5wbGFudCwgMjgwLCA1ODAsIF90aGlzLnBsYW50LmluaXRpYWxTaXplLCBNYXRoLlBJICogMS41LCAxLCA4LCBncmFwaGljcyk7CiAgICAgIH07CiAgICB9LCB0aGlzLiRlbCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBkcmF3OiBmdW5jdGlvbiAoX2RyYXcpIHsKICAgICAgZnVuY3Rpb24gZHJhdyhfeCwgX3gyLCBfeDMsIF94NCwgX3g1LCBfeDYsIF94NywgX3g4KSB7CiAgICAgICAgcmV0dXJuIF9kcmF3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIGRyYXcudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9kcmF3LnRvU3RyaW5nKCk7CiAgICAgIH07CgogICAgICByZXR1cm4gZHJhdzsKICAgIH0oZnVuY3Rpb24gKHBsYW50LCB4LCB5LCBzaXplLCB0aGV0YSwgYnJhbmNoRGlyZWN0aW9uLCBsZXZlbHMsIGNhbnZhcykgewogICAgICBpZiAobGV2ZWxzIDw9IDApIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciB4MiA9IHggKyBzaXplICogTWF0aC5jb3ModGhldGEpOwogICAgICB2YXIgeTIgPSB5ICsgc2l6ZSAqIE1hdGguc2luKHRoZXRhKTsKICAgICAgdmFyIGNlbnRlclggPSB4MiAtIDMwOwogICAgICB2YXIgY2VudGVyWSA9IHkyIC0gMzA7CgogICAgICBpZiAoMSA8PSBsZXZlbHMgPCAyKSB7CiAgICAgICAgLy8mJiAhKDI3OSA8IGNlbnRlclggPCAyODEpCiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpOwoKICAgICAgICBpZiAociA8IDAuMSkgewogICAgICAgICAgaWYgKHIgPCBwbGFudC5mbG93ZXJQcm9iKSB7CiAgICAgICAgICAgIGNhbnZhcy5wdXNoKCk7CiAgICAgICAgICAgIHRyYW5zbGF0ZShjZW50ZXJYLCBjZW50ZXJZKTsKICAgICAgICAgICAgcm90YXRlKHRoZXRhICsgUEkgLyAyKTsKICAgICAgICAgICAgaW1hZ2UocGxhbnQuZmxvd2VyLCAwLCAwLCA2MCwgNjApOwogICAgICAgICAgICBjYW52YXMucG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChyIDwgcGxhbnQuYmVycnlQcm9iICYmIHBsYW50LmJlcnJ5ICE9IG51bGwpIHsKICAgICAgICAgICAgY2FudmFzLnB1c2goKTsKICAgICAgICAgICAgdHJhbnNsYXRlKGNlbnRlclgsIGNlbnRlclkpOwogICAgICAgICAgICByb3RhdGUodGhldGEgKyBQSSAvIDIpOwogICAgICAgICAgICBpbWFnZShwbGFudC5iZXJyeSwgMCwgMCwgMjAsIDIwKTsKICAgICAgICAgICAgY2FudmFzLnBvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgc3Ryb2tlV2VpZ2h0KE1hdGgucG93KHBsYW50LnN0cm9rZVNpemVTZW5zaXRpdml0eSwgbGV2ZWxzKSk7IC8vIHN0cm9rZVdlaWdodChsZXZlbHMqLjUpCgogICAgICBjYW52YXMubGluZSh4LCB5LCB4MiwgeTIpOwogICAgICBkcmF3KHBsYW50LCB4MiwgeTIsIHNpemUgKiBwbGFudC5sZWZ0QnJhbmNoU2l6ZSwgdGhldGEgKyBicmFuY2hEaXJlY3Rpb24gKiBwbGFudC5yaWdodEJyYW5jaEFuZ2xlLCBicmFuY2hEaXJlY3Rpb24sIGxldmVscyAtIDEsIGNhbnZhcyk7CiAgICAgIGRyYXcocGxhbnQsIHgyLCB5Miwgc2l6ZSAqIHBsYW50LnJpZ2h0QnJhbmNoU2l6ZSwgdGhldGEgLSBicmFuY2hEaXJlY3Rpb24gKiBwbGFudC5sZWZ0QnJhbmNoQW5nbGUsIGJyYW5jaERpcmVjdGlvbiwgbGV2ZWxzIC0gMSwgY2FudmFzKTsKICAgICAgZHJhdyhwbGFudCwgeDIsIHkyLCBzaXplICogcGxhbnQubWlkQnJhbmNoU2l6ZSwgdGhldGEsIC1icmFuY2hEaXJlY3Rpb24sIGxldmVscyAtIDEsIGNhbnZhcyk7CiAgICB9KQogIH0sCiAgcmFuZG9tQ2hvaWNlOiBmdW5jdGlvbiByYW5kb21DaG9pY2UodmFsdWUxLCB2YWx1ZTIpIHsKICAgIHJldHVybiBNYXRoLnJhbmRvbSgpIDwgMC41ID8gdmFsdWUxIDogdmFsdWUyOwogIH0sCiAgcmFuZG9tSW5SYW5nZTogZnVuY3Rpb24gcmFuZG9tSW5SYW5nZSh2YWx1ZTEsIHZhbHVlMikgewogICAgaWYgKHZhbHVlMSA+IHZhbHVlMikgewogICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqICh2YWx1ZTEgLSB2YWx1ZTIpICsgdmFsdWUyOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAodmFsdWUyIC0gdmFsdWUxKSArIHZhbHVlMTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["/Users/tenzinnyima/Documents/GitHub/Inventory_Prototype/src/components/PlantRenderer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"plantContainer\" />\n</template>\n\n<script>\nimport p5 from 'p5';\nexport default{\n    props: {\n      plant: {},\n\n    },\n    mounted() {\n      new p5(\n          (graphics) => {\n            graphics.setup = () => {\n              graphics.createCanvas(300, 300);\n              graphics.background(174, 217, 165)\n              console.log(\"Here are our plant parameters:\", this.plant);\n              // Replace this with call to plant rendering code\n              // Something like drawPlant(this.plant, graphics)\n              graphics.strokeWeight(3);\n              graphics.circle(60, 30, this.plant.radius);\n\n              draw(this.plant, 280, 580, this.plant.initialSize, Math.PI * 1.5, 1, 8, graphics);\n\n\n            }\n          },\n          this.$el\n      );\n    },\n    methods:{\n      draw(plant, x, y, size, theta, branchDirection, levels, canvas) {\n        if (levels <= 0)  {\n          return;\n        }\n\n        let x2 = x + (size * Math.cos(theta));\n        let y2 = y + (size * Math.sin(theta));\n\n        let centerX = x2 - 30;\n        let centerY = y2 - 30;\n\n        if (1 <= levels < 2) { //&& !(279 < centerX < 281)\n          let r = Math.random();\n          if (r < 0.1) {\n            if (r < plant.flowerProb) {\n              canvas.push();\n              translate(centerX, centerY);\n              rotate(theta + PI / 2);\n              image(plant.flower, 0, 0, 60, 60);\n              canvas.pop();\n            }\n          }\n          else{\n            if (r < plant.berryProb && plant.berry != null) {\n              canvas.push();\n              translate(centerX, centerY);\n              rotate(theta + PI / 2);\n              image(plant.berry, 0, 0, 20, 20);\n              canvas.pop();\n            }\n          }\n        }\n        strokeWeight(Math.pow(plant.strokeSizeSensitivity, levels))\n        // strokeWeight(levels*.5)\n\n        canvas.line(x, y, x2, y2)\n\n        draw(plant, x2, y2, size * plant.leftBranchSize, theta + branchDirection * plant.rightBranchAngle, branchDirection, levels - 1, canvas);\n        draw(plant, x2, y2, size * plant.rightBranchSize, theta - branchDirection * plant.leftBranchAngle, branchDirection, levels - 1, canvas);\n        draw(plant, x2, y2, size * plant.midBranchSize, theta, -branchDirection, levels - 1, canvas);\n      }\n    },\n      randomChoice(value1, value2){\n        return Math.random() < 0.5 ? value1 : value2;\n      },\n      randomInRange(value1, value2){\n        if (value1 > value2){\n          return Math.random() * (value1 - value2) + value2;\n        }\n        else{\n          return Math.random() * (value2 - value1) + value1;\n        }\n    }\n};\n</script>\n\n<style scoped>\n</style>\n\n"],"sourceRoot":""}]}